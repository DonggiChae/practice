# -*- coding: utf-8 -*-
"""vggnet_practice3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19YKeYFZ8wIfwBhOyXoeW-01T5lgZ0R2Q
"""

###https://tutorials.pytorch.kr/beginner/nn_tutorial.html

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.datasets as dsets
import torchvision.transforms as transforms
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from google.colab import output


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

learning_rate = 0.01
training_epochs = 100
batch_size = 8
num_classes = 10
momentum = 0.9




transform = transforms.Compose(
    [transforms.Resize((224, 224)),
     transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])



classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

cifar10_train = dsets.CIFAR10(root = '/content/drive/MyDrive/dataset/input/', 
                                       train = True, 
                                       download=True,
                                       transform=transform
                                        )


train_loader = DataLoader(cifar10_train, batch_size=batch_size, shuffle=False)



class vgg16_D(nn.Module):

    def __init__(self):
        super(vgg16_D, self).__init__()
        self.layers1 = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2))
        
        self.layers2 = nn.Sequential(
            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2))
       
        self.layers3 = nn.Sequential(
            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2))
       
        self.layers4 = nn.Sequential(
            nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2))
        
        self.layers5 = nn.Sequential(
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2))
        
        self.fc = nn.Sequential(
            nn.Linear(25088, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(p=0.5),
            nn.Linear(4096, num_classes),
        )
        

    def forward(self, x):
        out = self.layers1(x)
        out = self.layers2(out)
        out = self.layers3(out)
        out = self.layers4(out)
        out = self.layers5(out)
        out = out.view(out.size(0), -1)
        out = self.fc(out)
        
        return out




model = vgg16_D().to(device)

criterion = nn.CrossEntropyLoss().to(device) 
optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum)




total_batch = len(train_loader)
print('총 배치의 수 : {}'.format(total_batch))



for epoch in range(training_epochs):
    count = 0 
    last_cost = 0
    for index, data in enumerate(train_loader):
        image, label = data
        image = image.to(device)
        label = label.to(device)



        optimizer.zero_grad()
        hypothesis = model(image)
        cost = criterion(hypothesis, label)
        cost.backward()
        optimizer.step()


        count += 1 
        if count == total_batch:
            last_cost += cost.item()
            print('loss: ' + str(last_cost) )
        
print('Finish!!!')


path = '/content/drive/MyDrive/dataset/'
torch.save(model.state_dict(), path)

"""# 새 섹션"""

cifar10_test = dsets.CIFAR10(root = '/content/drive/MyDrive/dataset/input/', 
                                       train = False, 
                                       download=True,
                                       transform = transform
                                        )


test_loader = DataLoader(cifar10_test, batch_size=batch_size, shuffle=False)


with torch.no_grad():
    correct = 0
    total = 0
    top1_value_sum = 0
    avg_top1 = 0
    top5_value_sum = 0
    avg_top5 = 0
    index = 0
    for index, data in enumerate(train_loader):
        
        image, label = data
        test_image = image.to(device)
        test_label = label.to(device)
        total += test_label.size(0)
        hypothesis= model(test_image)
        _, predicted = torch.max(hypothesis.data, 1)
        correct += (predicted == test_label).sum()
        top_list = torch.nn.functional.softmax(hypothesis, dim=1)
        top1_value, top1 = torch.topk(top_list, 1 )
        top1_value_sum += top1_value.sum()
        top5_value, top5 = torch.topk(top_list, 5 )
        # print(top5[0, :],top5,top5_value)
        top5_value_sum += top5_value.sum()
        # print(top5_value_sum)
        if index % 1000 == 0:
            print(top1_value, top5_value)
    avg_top1 = top1_value_sum / (1 * (index +1)) 
    avg_top5 = top5_value_sum / (5 * (index +1)) 
    accuracy =  (correct*100)/ total
    print(accuracy)
    print(avg_top1)
    print(avg_top5)